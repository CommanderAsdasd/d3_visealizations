{"errno":0,"content":"# Functions\r\n\r\n- [Categories of functions](#categories)\r\n- [Complete contents of functions](#contents)\r\n\r\n## Categories\r\n\r\n- [Audio](#audio)\r\n- [Color](#color)\r\n- [Geometry](#geometry)\r\n- [Global variables](#global-variables)\r\n- [Modulators](#modulators)\r\n- [Operators](#operators)\r\n- [Sources](#sources)\r\n- [Parameter sequences](#parameter-sequences)\r\n\r\n## Contents\r\n\r\n- [Audio](#audio)\r\n  - [hide](#hide)\r\n  - [setBins](#setbins)\r\n  - [setCutoff](#setcutoff)\r\n  - [setScale](#setScale)\r\n  - [setSmooth](#setSmooth)\r\n  - [show](#show)\r\n- [Color](#color)\r\n  - [brightness](#brightness)\r\n  - [contrast](#contrast)\r\n  - [color `vec4`](#color-vec4)\r\n  - [colorama](#colorama)\r\n  - [invert](#invert)\r\n  - [luma](#luma)\r\n  - [posterize](#posterize)\r\n  - [saturate](#saturate)\r\n  - [shift](#shift)\r\n  - [thresh](#thresh)\r\n- [Geometry](#geometry)\r\n  - [kaleid](#kaleid)\r\n  - [pixelate](#pixelate)\r\n  - [repeat](#repeat)\r\n  - [repeatX](#repeatX)\r\n  - [repeatY](#repeatY)\r\n  - [rotate](#rotate)\r\n  - [scale](#scale)\r\n  - [scrollX](#scrollX)\r\n  - [scrollY](#scrollY)\r\n- [Global variables](#global-variables)\r\n  - [mouse](#mouse)\r\n  - [time](#time)\r\n- [Modulators](#modulators)\r\n  - [modulate](#modulate)\r\n  - [modulateHue](#modulateHue)\r\n  - [modulateKaleid](#modulateKaleid)\r\n  - [modulatePixelate](#modulatePixelate)\r\n  - [modulateRepeat](#modulateRepeat)\r\n  - [modulateRepeatX](#modulateRepeatX)\r\n  - [modulateRepeatY](#modulateRepeatY)\r\n  - [modulateRotate](#modulateRotate)\r\n  - [modulateScale](#modulateScale)\r\n  - [modulateScrollX](#modulateScrollX)\r\n  - [modulateScrollY](#modulateScrollY)\r\n- [Operators](#operators)\r\n  - [add](#add)\r\n  - [blend](#blend)\r\n  - [diff](#diff)\r\n  - [layer](#layer)\r\n  - [mask](#mask)\r\n  - [mult](#mult)\r\n- [Sources](#sources)\r\n  - [gradient](#gradient)\r\n  - [noise](#noise)\r\n  - [osc](#osc)\r\n  - [out](#out)\r\n  - [render](#render)\r\n  - [shape](#shape)\r\n  - [solid](#solid)\r\n  - [src](#src)\r\n  - [voronoi](#voronoi)\r\n- [Parameter sequences](#parameter-sequences)\r\n  - [Lists as parameter sequences](#lists-as-parameter-sequences)\r\n  - [Functions on parameter sequences](#functions-on-parameter-sequences)\r\n    - [fast](#fast)\r\n\r\n---\r\n\r\n## Audio\r\n\r\nFunctions for manipulating audio signals.\r\n\r\n- [hide](#hide)\r\n- [setBins](#setbins)\r\n- [setCutoff](#setcutoff)\r\n- [setScale](#setScale)\r\n- [setSmooth](#setSmooth)\r\n- [show](#show)\r\n\r\n### hide\r\n\r\n`.hide()`\r\n\r\n### setBins\r\n\r\n`.setBins( bins )`\r\n\r\n* `bins` :: integer (default `x`)\r\n\r\n### setCutoff\r\n\r\n`.setCutoff( frequency )`\r\n\r\n* `frequency` :: float (default `x`)\r\n\r\n### setScale\r\n\r\n`.setScale( amount )`\r\n\r\n* `amount` :: float (default `x`) \r\n\r\n### setSmooth\r\n\r\n`.setSmooth( amount )`\r\n\r\n* `amount` :: float (default `x`)\r\n\r\n### show\r\n\r\n`.show()`\r\n\r\n---\r\n\r\n## Color\r\n\r\nFunctions for manipulating color.\r\n\r\n- [brightness](#brightness)\r\n- [contrast](#contrast)\r\n- [color `vec4`](#color-vec4)\r\n- [colorama](#colorama)\r\n- [invert](#invert)\r\n- [luma](#luma)\r\n- [posterize](#posterize)\r\n- [saturate](#saturate)\r\n- [shift](#shift)\r\n- [thresh](#thresh)\r\n\r\n### brightness\r\n\r\n`.brightness( amount )`\r\n\r\n* `amount` :: float (default `0.4`)\r\n\r\n#### Example\r\n\r\n```javascript\r\nosc(20,0,2)\r\n  .brightness( ({time}) => Math.sin(time) )\r\n  .out(o0)\r\n```\r\n\r\n### contrast\r\n\r\n`.contrast( amount )`\r\n\r\n* `amount` :: float (default `1.6`)\r\n\r\nLarger `amount` value makes higher contrast.\r\n\r\n#### Example\r\n\r\n```javascript\r\n// 20Hz oscillator with contrast interpolating between 0.0-5.0\r\nosc(20).contrast( ({time}) => Math.sin(time) * 5 ).out(o0)\r\n```\r\n\r\n### color `vec4`\r\n\r\n`.color( r, g, b )`\r\n\r\n* `r` :: float\r\n* `g` :: float\r\n* `b` :: float\r\n\r\nColorize texture.\r\n\r\n#### Example\r\n\r\n```javascript\r\n// 20Hz oscillator source\r\n// color sequence of Red, Green, Blue, White, Black\r\n// output to buffer o0\r\nosc(20).color([1,0,0,1,0],[0,1,0,1,0],[0,0,1,1,0]).out(o0)\r\n```\r\n\r\n### colorama\r\n\r\n`.colorama( amount )`\r\n\r\n* `amount` :: float (default `0.005`)\r\n\r\nShift HSV values.\r\n\r\n#### Example\r\n\r\n```javascript\r\n// 20Hz oscillator source\r\n// color sequence of Red, Green, Blue, White, Black\r\n// colorama sequence of 0.005, 0.5, 1.0 at 1/8 speed\r\n// output to buffer o0\r\nosc(20)\r\n  .color([1,0,0,1,0],[0,1,0,1,0],[0,0,1,1,0])\r\n  .colorama([0.005,0.33,0.66,1.0].fast(0.125))\r\n  .out(o0)\r\n```\r\n\r\n```javascript\r\n// \r\nnoise(3,0.1).colorama( ({time}) => Math.sin(time/5) ).out(o0)\r\n```\r\n\r\n### invert\r\n\r\n`.invert( amount )`\r\n\r\n* `amount` :: float (default `1.0`)\r\n\r\nInvert color.\r\n\r\n#### Example\r\n\r\n```javascript\r\nsolid(1,1,1).invert([0,1]).out(o0)\r\n```\r\n\r\n### luma\r\n\r\n`.luma( threshold, tolerance )`\r\n\r\n* `threshold` :: float (default `0.5`)\r\n* `tolerance` :: float (default `0.1`)\r\n\r\n#### Example\r\n\r\n```javascript\r\n// default\r\nosc(10,0,1).luma(0.5,0.1).out(o0)\r\n\r\nosc(10,0,[0,0.5,1,2]).luma([0.1,0.25,0.75,1].fast(0.25),0.1).out(o0)\r\n```\r\n\r\n### posterize\r\n\r\n`.posterize( bins, gamma )`\r\n\r\n* `bins` :: float (default `3.0`)\r\n* `gamma` :: float (default `0.6`)\r\n\r\n#### Example\r\n\r\n```javascript\r\n// static gradient posterized, varying bins\r\ngradient(0).posterize( [1, 5, 15, 30] , 0.5 ).out(o0)\r\n\r\n// static gradient posterized, varying gamma\r\ngradient(0).posterize( 3, [0.1, 0.5, 1.0, 2.0] ).out(o0)\r\n```\r\n\r\n### saturate\r\n\r\n`.saturate( amount )`\r\n\r\n* `amount` :: float (default `2.0`)\r\n\r\n#### Example\r\n\r\n```javascript\r\nosc(10,0,1).saturate( ({time}) => Math.sin(time) * 10 ).out()\r\n```\r\n\r\n### shift\r\n\r\n`.shift( r, g, b, a )`\r\n\r\n* `r` :: float (default `0.5`)\r\n* `g` :: float (default `0.5`)\r\n* `b` :: float (default `0.5`)\r\n* `a` :: float (default `0.5`)\r\n\r\n#### Example\r\n\r\n```javascript\r\n\r\n```\r\n\r\n### thresh\r\n\r\n`.thresh( threshold, tolerance )`\r\n\r\n* `threshold` :: float (default `0.5`)\r\n* `tolerance` :: float (default `0.04`)\r\n\r\n#### Example\r\n\r\n```javascript\r\n// default\r\nnoise(3,0.1).thresh(0.5,0.04).out(o0)\r\n\r\nnoise(3,0.1)\r\n  .thresh( ({time})=>Math.sin(time/2) , [0.04,0.25,0.75,1].fast(0.25) )\r\n  .out(o0)\r\n```\r\n\r\n---\r\n\r\n## Geometry\r\n\r\nFunctions for manipulating geometry.\r\n\r\n- [kaleid](#kaleid)\r\n- [pixelate](#pixelate)\r\n- [repeat](#repeat)\r\n- [repeatX](#repeatX)\r\n- [repeatY](#repeatY)\r\n- [rotate](#rotate)\r\n- [scale](#scale)\r\n- [scrollX](#scrollX)\r\n- [scrollY](#scrollY)\r\n\r\n### kaleid\r\n\r\n`.kaleid( nSides )`\r\n\r\n* `nSides` :: float (default `4.0`)\r\n\r\nKaleidoscope effect with `nSides` repetition.\r\n\r\n#### Example\r\n\r\n```javascript\r\nosc(25,-0.1,0.5).kaleid(50).out(o0)\r\n```\r\n\r\n### pixelate\r\n\r\n`.pixelate( x, y )`\r\n\r\n* `pixelX` :: float (default `20.0`)\r\n* `pixelY` :: float (default `20.0`)\r\n\r\nPixelate texture with `pixelX` segments and `pixelY` segments.\r\n\r\n#### Example\r\n\r\n```javascript\r\n// default\r\nnoise().pixelate(20,20).out(o0)\r\n\r\nnoise()\r\n  .mult(osc(10,0.25,1))\r\n  .scrollY(1,0.25)\r\n  .pixelate([100,40,20,70].fast(0.25))\r\n  .modulateRotate(src(o0).scale(0.5),0.125)\r\n  .diff(src(o0).rotate([-0.05,0.05].fast(0.125)))\r\n  .out(o0)\r\n```\r\n\r\n### repeat\r\n\r\n`.repeat( repeatX, repeatY, offsetX, offsetY )`\r\n\r\n* `repeatX` :: float (default `3.0`)\r\n* `repeatY` :: float (default `3.0`)\r\n* `offsetX` :: float (default `0.0`)\r\n* `offsetY` :: float (default `0.0`)\r\n\r\n#### Example\r\n\r\n```javascript\r\n// default\r\nshape().repeat(3.0, 3.0, 0.0, 0.0).out()\r\n\r\n// dogtooth factory\r\nshape(1.25,0.5,0.25)\r\n  .repeat(3, 3)\r\n  .scale(2)\r\n  .repeat(5, 5, ({time}) => Math.sin(time), ({time}) => Math.sin(time/2))\r\n  .out(o0)\r\n```\r\n\r\n### repeatX\r\n\r\n`.repeatX( reps, offset )`\r\n\r\n* `reps` :: float (default `3.0`)\r\n* `offset` :: float (default `0.0`)\r\n\r\n#### Example\r\n\r\n```javascript\r\n// default\r\nshape().repeatX(3.0, 0.0).out()\r\n\r\nosc(5,0,1)\r\n  .rotate(1.57)\r\n  .repeatX([1,2,5,10], ({time}) => Math.sin(time))\r\n  .out()\r\n```\r\n\r\n### repeatY\r\n\r\n`.repeatY( reps, offset )`\r\n\r\n* `reps` :: float (default `3.0`)\r\n* `offset` :: float (default `0.0`)\r\n\r\n#### Example\r\n\r\n```javascript\r\n// default\r\nshape().repeatY(3.0, 0.0).out()\r\n\r\nosc(5,0,1)\r\n  .repeatY([1,2,5,10], ({time}) => Math.sin(time))\r\n  .out()\r\n```\r\n\r\n### rotate\r\n\r\n`.rotate( angle, speed )`\r\n\r\n* `angle` :: float (default `10.0`)\r\n* `speed` :: float (default `0.0`)\r\n\r\nRotate texture.\r\n\r\n#### Example\r\n\r\n```javascript\r\nosc(50).rotate( ({time}) => time%360 ).out(o0)\r\n\r\nosc(10,1,1)\r\n    .rotate( ({time}) => time%360, ({time}) => Math.sin(time*0.1)*0.05 )\r\n    .out(o0)\r\n```\r\n\r\n### scale\r\n\r\n`.scale( size, xMult, yMult )`\r\n\r\n* `size` :: float (default `1.5`)\r\n* `xMult` :: float (default `1.0`)\r\n* `yMult` :: float (default `1.0`)\r\n\r\nScale texture.\r\n\r\n#### Example\r\n\r\n```javascript\r\n// default\r\nshape().scale(1.5,1,1).out()\r\n\r\nshape().scale(1.5,[0.25,0.5,0.75,1].fast(0.25),[3,2,1])\r\n  .invert([0,1].fast(0.25))\r\n  .kaleid(5)\r\n  .kaleid(12)\r\n  .scale( ({time})=>Math.sin(time/5)*0.5 )\r\n  .rotate(1,1)\r\n  .out(o0)\r\n```\r\n\r\n### scrollX\r\n\r\n`.scrollX( scrollX, speed )`\r\n\r\n* `scrollX` :: float (default `0.5`)\r\n* `speed` :: float (default `0.0`)\r\n\r\n#### Example\r\n\r\n```javascript\r\n// default\r\nosc(10,0,1).scrollX(0.5,0).out()\r\n\r\n// x position\r\nosc(10,0,1).scrollX([0,0.25,0.5,0.75,1].fast(4),0).out()\r\n\r\n// scroll speed\r\ngradient(1).scrollX(0, ({time}) => Math.sin(time*0.05)*0.05 ).out()\r\n\r\ngradient(0.125)\r\n  .scrollX(0, ({time}) => Math.sin(time*0.05)*0.05 )\r\n  .scrollY(0, ({time}) => Math.sin(time*0.01)*-0.07 )\r\n  .pixelate([5,2,10],[15,8])\r\n  .scale(0.15)\r\n  .modulate(noise(1,0.25))\r\n  .out()\r\n```\r\n\r\n### scrollY\r\n\r\n`.scrollY( scrollY, speed )`\r\n\r\n* `scrollY` :: float (default `0.5`)\r\n* `speed` :: float (default `0.0`)\r\n\r\n#### Example\r\n\r\n```javascript\r\n// default\r\nosc(10,0,1).scrollY(0.5,0).out()\r\n\r\n// y position\r\nosc(10,0,1).scrollY([0,0.25,0.5,0.75,1].fast(4),0).out()\r\n\r\n// scroll speed\r\ngradient(1).scrollY(0, ({time}) => Math.sin(time*0.05)*0.05 ).out()\r\n\r\ngradient(0.125)\r\n  .scrollX(0, ({time}) => Math.sin(time*0.05)*0.05 )\r\n  .scrollY(0, ({time}) => Math.sin(time*0.01)*-0.07 )\r\n  .pixelate([5,2,10],[15,8])\r\n  .scale(0.15)\r\n  .modulate(noise(1,0.25))\r\n  .out()\r\n```\r\n\r\n---\r\n\r\n## Global variables\r\n\r\nUseful variables that are defined globally, and can be used within functions as a parameter.\r\n\r\n- [mouse](#mouse)\r\n- [time](#time)\r\n\r\n### mouse\r\n\r\n`mouse`\r\n\r\n* `.x` :: x position of mouse\r\n* `.y` :: y position of mouse\r\n\r\n#### Example\r\n\r\nControl the oscillator frequency with the mouse position:\r\n\r\n```javascript\r\nosc(() => mouse.x).out(o0)\r\n```\r\n\r\n### time\r\n\r\n`time`\r\n\r\n* `time` :: the current time\r\n\r\n#### Example\r\n\r\nControl the oscillator using a sine wave based on the current time:\r\n\r\n```javascript\r\nosc( ({time}) => Math.sin(time) ).out(o0)\r\n```\r\n\r\n---\r\n\r\n## Modulators\r\n\r\nFunctions for describing modulations of sources. \r\n\r\n- [modulate](#modulate)\r\n- [modulateHue](#modulateHue)\r\n- [modulateKaleid](#modulateKaleid)\r\n- [modulatePixelate](#modulatePixelate)\r\n- [modulateRepeat](#modulateRepeat)\r\n- [modulateRepeatX](#modulateRepeatX)\r\n- [modulateRepeatY](#modulateRepeatY)\r\n- [modulateRotate](#modulateRotate)\r\n- [modulateScale](#modulateScale)\r\n- [modulateScrollX](#modulateScrollX)\r\n- [modulateScrollY](#modulateScrollY)\r\n\r\n### modulate\r\n\r\n`.modulate( texture, amount )`\r\n\r\n* `texture`\r\n  * `color` :: see [color `vec4`](#color-vec4)\r\n  * `src` :: see [`src`](#src)\r\n  * `shape` :: see [`shape`](#shape)\r\n* `amount` :: float (default `0.1`)\r\n\r\nModulate texture. \r\nMore about modulation at: https://lumen-app.com/guide/modulation/\r\n\r\n#### Example\r\n\r\n```javascript\r\n// chocolate whirlpool\r\nvoronoi()\r\n  .color(0.9,0.25,0.15)\r\n  .rotate(({time})=>(time%360)/2)\r\n  .modulate(osc(25,0.1,0.5)\r\n            .kaleid(50)\r\n            .scale(({time})=>Math.sin(time*1)*0.5+1)\r\n            .modulate(noise(0.6,0.5)),\r\n            0.5)\r\n  .out(o0)\r\n```\r\n\r\n### modulateHue\r\n\r\n`.modulateHue( color, amount )`\r\n\r\n* `texture`\r\n  * `color` :: see [color `vec4`](#color-vec4)\r\n  * `src` :: see [`src`](#src)\r\n  * `shape` :: see [`shape`](#shape)\r\n* `amount` :: float (default `1.0`)\r\n\r\nChanges coordinates based on hue of second input. \r\nBased on:https://www.shadertoy.com/view/XtcSWM\r\n\r\n#### Example\r\n\r\n```javascript\r\n\r\n```\r\n\r\n### modulateKaleid\r\n\r\n`.modulateKaleid( nSides )`\r\n\r\n* `texture`\r\n  * `color` :: see [color `vec4`](#color-vec4)\r\n  * `src` :: see [`src`](#src)\r\n  * `shape` :: see [`shape`](#shape)\r\n* `nSides` :: float (default `4.0`)\r\n\r\nSee also: [`kaleid`](#kaleid).\r\n\r\n#### Example\r\n\r\n```javascript\r\nosc(9,-0.1,0.1)\r\n  .modulateKaleid(osc(11,0.5,0),50)\r\n  .scale(0.1,0.3)\r\n  .modulate(noise(5,0.1))\r\n  .mult(solid(1,1,0.3))\r\n  .out(o0)\r\n```\r\n\r\n### modulatePixelate\r\n\r\n`.modulatePixelate( multiple, offset )`\r\n\r\n* `texture`\r\n  * `color` :: see [color `vec4`](#color-vec4)\r\n  * `src` :: see [`src`](#src)\r\n  * `shape` :: see [`shape`](#shape)\r\n* `multiple` :: float (default `10.0`)\r\n* `offset` :: float (default `3.0`)\r\n\r\nSee also: [`pixelate`](#pixelate)\r\n\r\n#### Example\r\n\r\n```javascript\r\n// what lies beneath\r\nvoronoi(10,1,5).brightness(()=>Math.random()*0.15)\r\n  .modulatePixelate(noise(25,0.5),100)\r\n  .out(o0)\r\n```\r\n\r\n### modulateRepeat\r\n\r\n`.modulateRepeat( texture, repeatX, repeatY, offsetX, offsetY )`\r\n\r\n* `texture`\r\n  * `color` :: see [color `vec4`](#color-vec4)\r\n  * `src` :: see [`src`](#src)\r\n  * `shape` :: see [`shape`](#shape)\r\n* `repeatX` :: float (default `3.0`)\r\n* `repeatY` :: float (default `3.0`)\r\n* `offsetX` :: float (default `0.5`)\r\n* `offsetY` :: float (default `0.5`)\r\n\r\n#### Example\r\n\r\n```javascript\r\n// default\r\nshape(4,0.9)\r\n  .mult(osc(3,0.5,1))\r\n  .modulateRepeat(osc(10), 3.0, 3.0, 0.5, 0.5)\r\n  .out(o0)\r\n```\r\n\r\n### modulateRepeatX\r\n\r\n`.modulateRepeatX( texture, reps, offset )`\r\n\r\n* `texture`\r\n  * `color` :: see [color `vec4`](#color-vec4)\r\n  * `src` :: see [`src`](#src)\r\n  * `shape` :: see [`shape`](#shape)\r\n* `reps` :: float (default `3.0`)\r\n* `offset` :: float (default `0.5`)\r\n\r\n#### Example\r\n\r\n```javascript\r\n// straight lines illusion\r\nshape(4,0.9)\r\n  .mult(osc(4,0.25,1))\r\n  .modulateRepeatX(osc(10), 5.0, ({time}) => Math.sin(time) * 5)\r\n  .scale(1,0.5,0.05)\r\n  .out(o0)\r\n```\r\n\r\n### modulateRepeatY\r\n\r\n`.modulateRepeatY( texture, reps, offset )`\r\n\r\n* `texture`\r\n  * `color` :: see [color `vec4`](#color-vec4)\r\n  * `src` :: see [`src`](#src)\r\n  * `shape` :: see [`shape`](#shape)\r\n* `reps` :: float (default `3.0`)\r\n* `offset` :: float (default `0.5`)\r\n\r\n#### Example\r\n\r\n```javascript\r\n// morphing grid\r\nshape(4,0.9)\r\n  .mult(osc(4,0.25,1))\r\n  .modulateRepeatY(osc(10), 5.0, ({time}) => Math.sin(time) * 5)\r\n  .scale(1,0.5,0.05)\r\n  .out(o0)\r\n```\r\n\r\n### modulateRotate\r\n\r\n`.modulateRotate( texture, multiple, offset )`\r\n\r\n* `texture`\r\n  * `color` :: see [color `vec4`](#color-vec4)\r\n  * `src` :: see [`src`](#src)\r\n  * `shape` :: see [`shape`](#shape)\r\n* `multiple` :: float (default `1.0`)\r\n* `offset` :: float (default `0.0`)\r\n\r\nSee also: [`rotate`](#rotate)\r\n\r\n#### Example\r\n\r\n```javascript\r\n// wormhole\r\nvoronoi(100,3,5)\r\n  .modulateRotate(osc(1,0.5,0).kaleid(50).scale(0.5),15,0)\r\n  .mult(osc(50,-0.1,8).kaleid(9))\r\n  .out(o0)\r\n```\r\n\r\n### modulateScale\r\n\r\n`.modulateScale( multiple, offset )`\r\n\r\n* `texture`\r\n  * `color` :: see [color `vec4`](#color-vec4)\r\n  * `src` :: see [`src`](#src)\r\n  * `shape` :: see [`shape`](#shape)\r\n* `multiple` :: float (default `1.0`)\r\n* `offset` :: float (default `1.0`)\r\n\r\nSee also: [`scale`](#scale)\r\n\r\n#### Example\r\n\r\n```javascript\r\n// cosmic radiation\r\ngradient(5).repeat(50,50).kaleid([3,5,7,9].fast(0.5))\r\n  .modulateScale(osc(4,-0.5,0).kaleid(50).scale(0.5),15,0)\r\n  .out(o0)\r\n```\r\n\r\n### modulateScrollX\r\n\r\n`.modulateScrollX( multiple, scrollX, speed )`\r\n\r\n* `texture`\r\n  * `color` :: see [color `vec4`](#color-vec4)\r\n  * `src` :: see [`src`](#src)\r\n  * `shape` :: see [`shape`](#shape)\r\n* `scrollX` :: float (default `0.5`)\r\n* `speed` :: float (default `0.0`)\r\n\r\nSee also: [`scrollX`](#scrollx)\r\n\r\n#### Example\r\n\r\n```javascript\r\n// default\r\nvoronoi(25,0,0)\r\n  .modulateScrollX(osc(10),0.5,0)\r\n  .out(o0)\r\n\r\n// different scroll and speed\r\nvoronoi(25,0,0)\r\n  .modulateScrollX(osc(10),0.5,0.25)\r\n  .out(o0)\r\n```\r\n\r\n### modulateScrollY\r\n\r\n`.modulateScrollY( multiple, scrollX, speed )`\r\n\r\n* `texture`\r\n  * `color` :: see [color `vec4`](#color-vec4)\r\n  * `src` :: see [`src`](#src)\r\n  * `shape` :: see [`shape`](#shape)\r\n* `scrollY` :: float (default `0.5`)\r\n* `speed` :: float (default `0.0`)\r\n\r\nSee also: [`scrollY`](#scrollY)\r\n\r\n#### Example\r\n\r\n```javascript\r\n// default\r\nvoronoi(25,0,0)\r\n  .modulateScrollY(osc(10),0.5,0)\r\n  .out(o0)\r\n\r\n// different scroll and speed\r\nvoronoi(25,0,0)\r\n  .modulateScrollY(osc(10),0.5,0.25)\r\n  .out(o0)\r\n```\r\n\r\n---\r\n\r\n## Operators\r\n\r\nFunctions for performing operations on sources.\r\n\r\n- [add](#add)\r\n- [blend](#blend)\r\n- [diff](#diff)\r\n- [layer](#layer)\r\n- [mask](#mask)\r\n- [mult](#mult)\r\n\r\n### add\r\n\r\n`.add( texture, amount )`\r\n\r\n* `texture`\r\n  * `color` :: see [color `vec4`](#color-vec4)\r\n  * `src` :: see [`src`](#src)\r\n  * `shape` :: see [`shape`](#shape)\r\n* `amount` :: float (default `0.5`)\r\n\r\nAdd textures.\r\n\r\n#### Example\r\n\r\n```javascript\r\nshape().scale(0.5).add(shape(4),[0,0.25,0.5,0.75,1]).out()\r\n\r\nosc(9,0.1,1).add(osc(13,0.5,5)).out()\r\n```\r\n\r\n### blend\r\n\r\n`.blend( texture, amount )`\r\n\r\n* `texture`\r\n  * `color` :: see [color `vec4`](#color-vec4)\r\n  * `src` :: see [`src`](#src)\r\n  * `shape` :: see [`shape`](#shape)\r\n* `amount` :: float (default `0.5`)\r\n\r\nBlend textures.\r\n\r\n#### Example\r\n\r\n```javascript\r\nshape().scale(0.5).blend(shape(4),[0,0.25,0.5,0.75,1]).out()\r\n\r\nosc(9,0.1,1).blend(osc(13,0.5,5)).out()\r\n```\r\n\r\n### diff\r\n\r\n`.diff( texture )`\r\n\r\n* `texture`\r\n  * `color` :: see [color `vec4`](#color-vec4)\r\n  * `src` :: see [`src`](#src)\r\n  * `shape` :: see [`shape`](#shape)\r\n\r\nReturn difference of textures.\r\n\r\n#### Example\r\n\r\n```javascript\r\nosc(9,0.1,1).diff(osc(13,0.5,5)).out()\r\n\r\nosc(1,1,2)\r\n  .diff(shape(6,1.1,0.01)\r\n        .scale(({time})=>Math.sin(time)*0.05 + 0.9)\r\n        .kaleid(15)\r\n        .rotate(({time})=>time%360))\r\n  .out()\r\n```\r\n\r\n### layer\r\n\r\n`.layer( texture )`\r\n\r\n* `texture`\r\n  * `color` :: see [color `vec4`](#color-vec4)\r\n  * `src` :: see [`src`](#src)\r\n  * `shape` :: see [`shape`](#shape)\r\n\r\nOverlay texture based on alpha value.\r\n\r\n#### Example\r\n\r\n```javascript\r\nsolid(1,0,0,1).layer(shape(4).color(0,1,0,({time})=>Math.sin(time*2))).out()\r\n```\r\n\r\n### mask\r\n\r\n`.mask( texture, reps, offset )`\r\n\r\n* `texture`\r\n  * `color` :: see [color `vec4`](#color-vec4)\r\n  * `src` :: see [`src`](#src)\r\n  * `shape` :: see [`shape`](#shape)\r\n* `reps` :: float (default `3.0`)\r\n* `offset` :: float (default `0.5`)\r\n\r\n#### Example\r\n\r\n```javascript\r\n// default\r\ngradient(5).mask(voronoi(),3,0.5).invert([0,1]).out()\r\n\r\n// algae pulse\r\nosc(10,-0.25,1).color(0,0,1).saturate(2).kaleid(50)\r\n  .mask(noise(25,2).modulateScale(noise(0.25,0.05)))\r\n  .modulateScale(osc(6,-0.5,2).kaleid(50))\r\n  .mult(osc(3,-0.25,2).kaleid(50))\r\n  .scale(0.5,0.5,0.75)\r\n  .out()\r\n```\r\n\r\n### mult\r\n\r\n`.mult( texture, amount )`\r\n\r\n* `texture`\r\n  * `color` :: see [color `vec4`](#color-vec4)\r\n  * `src` :: see [`src`](#src)\r\n  * `shape` :: see [`shape`](#shape)\r\n* `amount` :: float (default `1.0`)\r\n\r\nMultiply images and blend with the texture by `amount`.\r\n\r\n#### Example\r\n\r\n```javascript\r\nosc(9,0.1,2).mult(osc(13,0.5,5)).out()\r\n```\r\n\r\n---\r\n\r\n## Sources\r\n\r\nSources are elementary generators that output different types of visual content.\r\n\r\n- [gradient](#gradient)\r\n- [noise](#noise)\r\n- [osc](#osc)\r\n- [out](#out)\r\n- [render](#render)\r\n- [shape](#shape)\r\n- [solid](#solid)\r\n- [src](#src)\r\n- [voronoi](#voronoi)\r\n\r\n### gradient\r\n\r\n`gradient( speed )`\r\n\r\n* `speed` :: float (default `x`)\r\n\r\n#### Example\r\n\r\n```javascript\r\n// gradient sequence at speeds of 1, 2 & 4\r\ngradient([1,2,4]).out(o0)\r\n```\r\n\r\n### noise\r\n\r\n`noise( scale, offset )`\r\n\r\n* `scale` :: int (default `10.0`)\r\n* `offset` :: float (default `0.1`)\r\n\r\nGenerate [Perlin noise](https://en.wikipedia.org/wiki/Perlin_noise).\r\n\r\n#### Example\r\n\r\n```javascript\r\n// noise interpolating between different scales and offsets\r\nnoise( ({time}) => Math.sin(time/10)*50 , ({time}) => Math.sin(time/2)/500 )\r\n    .out(o0)\r\n```\r\n\r\n### osc\r\n\r\n`osc( frequency, sync, offset )`\r\n\r\n* `frequency` :: float (default `60.0`)\r\n* `sync` :: float (default `0.1`)\r\n* `offset` :: float (default `0.0`)\r\n\r\n#### Example\r\n\r\n```javascript\r\n// frequency\r\nosc( [1,10,50,100,250,500].fast(2) ).out(o0)\r\n\r\n// frequency 2\r\nosc( ({time}) => Math.sin(time/10) * 100 ).out(o0)\r\n\r\n// sync\r\nosc( 10, [-10,-1,-0.1,0,0.1,1,10], 0 ).out(o0)\r\n\r\n// offset\r\nosc(10,0.1, ({time}) => Math.sin(time/10) * 100 ).out(o0)\r\n```\r\n\r\n### out\r\n\r\n`.out( buffer )`\r\n\r\n* `buffer`\r\n  * `osc`: `o0`, `o1`, `o2`, `o3`\r\n  * `src`: `s0`, `s1`, `s2`, `s3`\r\n\r\n#### Example\r\n\r\n```javascript\r\n// output four oscillators to different buffers\r\n// and then modulate them together\r\nosc( [1,10,50,100,250,500].fast(2) ).kaleid(20).out(o0) // frequency\r\nosc( ({time}) => Math.sin(time/10) * 100 ).kaleid(19).out(o1) // frequency 2\r\nosc( 10, [-10,-1,-0.1,0,0.1,1,10], 0 ).kaleid(21).out(o2) // sync\r\nosc(10,0.1, ({time}) => Math.sin(time/10) * 1 ) // offset\r\n  .modulate(o1,0.05)\r\n  .modulate(o2,0.05)\r\n  .modulate(o3,0.05)\r\n  .kaleid(20)\r\n  .add(noise(3,10))\r\n  .out(o3)\r\nrender(o3)\r\n```\r\n\r\n### render\r\n\r\n`render( buffer )`\r\n\r\n* `buffer`: buffer (default `o0`)\r\n\r\n#### Example\r\n\r\n```javascript\r\nosc( [1,10,50,100,250,500].fast(2) ).out(o0) // frequency\r\nosc( ({time}) => Math.sin(time/10) * 100 ).out(o1) // frequency 2\r\nosc( 10, [-10,-1,-0.1,0,0.1,1,10], 0 ).out(o2) // sync\r\nosc(10,0.1, ({time}) => Math.sin(time/10) * 100 ).out(o3) // offset\r\n\r\nrender(o0) // change to o1, o2, or o3\r\n```\r\n\r\n```javascript\r\n// see all four buffers at once\r\nosc( [1,10,50,100,250,500].fast(2) ).out(o0) // frequency\r\nosc( ({time}) => Math.sin(time/10) * 100 ).out(o1) // frequency 2\r\nosc( 10, [-10,-1,-0.1,0,0.1,1,10], 0 ).out(o2) // sync\r\nosc(10,0.1, ({time}) => Math.sin(time/10) * 100 ).out(o3) // offset\r\nrender()\r\n```\r\n\r\n### shape\r\n\r\n`shape( sides, radius, smoothing)`\r\n\r\n* `sides` :: int (default `3.0`)\r\n* `radius` :: float (default `0.3`)\r\n* `smoothing` :: float (default `0.01`)\r\n\r\n#### Example\r\n\r\n```javascript\r\n// inverting blurry circle\r\nshape(100,0.01,1).invert(({time})=>Math.sin(time)*2).out(o0)\r\n\r\n// a... rainbow ball?\r\nshape(5,0.5,0.1).repeat(19,19)\r\n  .mult(osc(10,1,2))\r\n  .rotate( ({time}) => time%360 )\r\n  .scrollX(1,-0.25)\r\n  .mult(shape(15,0.3,0.01)\r\n        .rotate( ({time}) => time%360 )\r\n        .scrollX(1,-0.25))\r\n  .out(o0)\r\n```\r\n\r\n### solid\r\n\r\n`solid( r, g, b, a )`\r\n\r\n* `r` :: float (default `0.0`)\r\n* `g` :: float (default `0.0`)\r\n* `b` :: float (default `0.0`)\r\n* `a` :: float (default `1.0`)\r\n\r\n#### Example\r\n\r\n```javascript\r\n// cycling through red, green and blue\r\nsolid([1,0,0],[0,1,0],[0,0,1],1).out(o0)\r\n```\r\n\r\n### src\r\n\r\n`src( input )`\r\n\r\n* `input` :: input (examples: `o0`, `s1`)\r\n\r\nSee `hydra-examples` repository\r\n\r\n### voronoi\r\n\r\n`voronoi( scale, speed, blending )`\r\n\r\n* `scale` :: float (default `5`)\r\n* `speed` :: float (default `0.3`)\r\n* `blending` :: float (default `0.3`)\r\n\r\nGenerate [voronoi shapes](https://en.wikipedia.org/wiki/Voronoi_diagram).\r\n\r\n#### Example\r\n\r\n```javascript\r\n// default\r\nvoronoi(5,0.3,0.3).out(o0)\r\n\r\n// fireflies\r\nvoronoi(25,2,10).color(1,1,0).brightness(0.15).out(o0)\r\n```\r\n\r\n---\r\n\r\n## Parameter sequences\r\n\r\n- [Lists as parameter sequences](#lists-as-parameter-sequences)\r\n- [Functions on parameter sequences](#functions-on-parameter-sequences)\r\n    - [fast](#fast)\r\n\r\n### Lists as parameter sequences\r\n\r\n```\r\nosc(\r\n   [80, 100, 200, 50], 1 )\r\n)\r\n.out(o0)\r\n```\r\n\r\n### Functions on parameter sequences\r\n\r\n#### fast\r\n\r\n`fast ( amount) `\r\n\r\n* `amount` :: float (default `x`)\r\n\r\n```\r\nosc(\r\n   [80, 100, 200, 50].fast(0.2), 1 )\r\n)\r\n.out(o0)\r\n```\r\n"}